- id: sync_living_room_trv_temperature
  alias: Sync Living Room TRV temperature
  use_blueprint:
    path: denysdovhan/sync_trv_with_external_sensor.yaml
    input:
      valve: climate.living_room_heater
      temp_sensor: sensor.living_room_temperature

- id: sync_bedroom_trv_temperature
  alias: Sync Bedroom TRV temperature
  use_blueprint:
    path: denysdovhan/sync_trv_with_external_sensor.yaml
    input:
      valve: climate.bedroom_heater
      temp_sensor: sensor.bedroom_temperature

- id: switch_heaters_during_heating_season
  alias: Switch Heaters during Heating Season
  description: Turn on/off heaters when Heating Season in on
  trigger:
    platform: state
    entity_id: binary_sensor.heating_season
    to: ~
  action:
    - alias: Choose what to do with the heaters
      choose:
        - conditions:
            - alias: Start of the Heating Season
              condition: state
              entity_id: binary_sensor.heating_season
              state: 'on'
            - alias: And heaters are still off
              condition: state
              entity_id:
                - climate.living_room_heater
                - climate.bedroom_heater
              state: 'off'
          sequence:
            - alias: Turn on Heating
              service: climate.set_hvac_mode
              data:
                entity_id:
                  - climate.living_room_heater
                  - climate.bedroom_heater
                hvac_mode: auto
      default:
        - alias: Turn off Heating
          service: climate.set_hvac_mode
          data:
            entity_id:
              - climate.living_room_heater
              - climate.bedroom_heater
            hvac_mode: off

    - alias: Notify about the action
      service: script.announcement
      data:
        title: –û–ø–∞–ª–µ–Ω–Ω—è üî•
        speak: false
        greetings:
          - "–ü—Ä–æ–≥–Ω–æ–∑—É—î—Ç—å—Å—è {{ iif(is_state('binary_sensor.heating_season'), '–ø–æ—Ö–æ–ª–æ–¥–∞–Ω–Ω—è', '–ø–æ—Ç–µ–ø–ª—ñ–Ω–Ω—è') }}."
          - "–ù–∞–±–ª–∏–∂–∞—î—Ç—å—Å—è {{ iif(is_state('binary_sensor.heating_season'), '—Ö–æ–ª–æ–¥–Ω–∞', '—Ç–µ–ø–ª–∞') }} –ø–æ–≥–æ–¥–∞."
          - "–ù–∞–π–±–ª–∏–∂—á—ñ 3 –¥–Ω—ñ –æ—á—ñ–∫—É—î—Ç—å—Å—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {{ iif(is_state('binary_sensor.heating_season'), '–Ω–∏–∂—á–µ', '–≤–∏—â–µ') }} 8¬∞C."
          - "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {{ iif(is_state('binary_sensor.heating_season'), '–æ–ø—É—Å—Ç–∏—Ç—å—Å—è –Ω–∏–∂—á–µ', '–ø—ñ–¥–Ω—ñ–º–µ—Ç—å—Å—è –≤–∏—â–µ') }} 8¬∞C."
        messages:
          - "{{ iif(is_state('binary_sensor.heating_season'), '–ü–æ—á–∏–Ω–∞—î–º–æ', '–ó–∞–∫—ñ–Ω—á—É—î–º–æ') }} –æ–ø–∞–ª—é–≤–∞–ª—å–Ω–∏–π –ø–µ—Ä—ñ–æ–¥."
          - "{{ iif(is_state('binary_sensor.heating_season'), '–ü–æ—á–∞—Ç–æ–∫', '–ö—ñ–Ω–µ—Ü—å') }} –æ–ø–∞–ª—é–≤–∞–ª—å–Ω–æ–≥–æ —Å–µ–∑–æ–Ω—É."
          - "{{ iif(is_state('binary_sensor.heating_season'), '–†–æ–∑–ø–æ—á–∏–Ω–∞—î–º–æ', '–ó–∞–∫—ñ–Ω—á—É—î–º–æ') }} –æ–ø–∞–ª—é–≤–∞–ª—å–Ω–∏–π —Å–µ–∑–æ–Ω."
          - "{{ iif(is_state('binary_sensor.heating_season'), '–í–º–∏–∫–∞—î–º–æ', '–í–∏–º–∏–∫–∞—î–º–æ') }} –æ–ø–∞–ª—é–≤–∞–Ω–Ω—è –≤–¥–æ–º–∞."
          - "{{ iif(is_state('binary_sensor.heating_season'), '–£–≤—ñ–º–∫–Ω–µ–Ω–æ', '–í–∏–º–∫–Ω–µ–Ω–æ') }} –æ–ø–∞–ª–µ–Ω–Ω—è."
        notify_data:
          actions:
            - action: '{{ heat_action }}'
              title: –ù–∞–≥—Ä—ñ—Ç–∏ –±–∞–ª–∫–æ–Ω
          url: /lovelace/balcony

- id: valve_maintenance
  alias: Valve Maintenance
  description: Fully opens and closes valves in order to keep them functional
  trigger:
    platform: time
    at: '12:00'
  condition:
    - alias: First day of the month
      condition: template
      value_template: '{{ now().day == 1 }}'
    - alias: Middle of the month
      condition: template
      value_template: '{{ now().day == 15 }}'
  action:
    - alias: Fully open valves
      service: select.select_option
      data:
        entity_id:
          - select.living_room_heater_force
          - select.bedroom_heater_force
        option: open

    - alias: Wait for valves to open
      wait_for_trigger:
        - platform: numeric_state
          entity_id:
            - sensor.living_room_heater_position
            - sensor.bedroom_heater_position
          above: 99
          for:
            seconds: 30
      timeout:
        minutes: 2

    - alias: Fully close valves
      service: select.select_option
      data:
        entity_id:
          - select.living_room_heater_force
          - select.bedroom_heater_force
        option: close

    - alias: Wait for valves to close
      wait_for_trigger:
        - platform: numeric_state
          entity_id:
            - sensor.living_room_heater_position
            - sensor.bedroom_heater_position
          below: 1
          for:
            seconds: 30
      timeout:
        minutes: 2

    - alias: Switch valves back to normal
      service: select.select_option
      data:
        entity_id:
          - select.living_room_heater_force
          - select.bedroom_heater_force
        option: normal

- id: turn_on_balcony_heater
  alias: Turn on Balcony Heater
  trigger:
    - platform: state
      entity_id: binary_sensor.working_display_connected
      to: 'on'
    - platform: state
      entity_id: light.desk_lamp
      to: 'on'
    - platform: state
      entity_id: binary_sensor.balcony_comfort_temperature
      to: 'off'
  condition:
    - alias: Turn on only when someone is home
      condition: state
      entity_id: group.family
      state: 'home'
    - condition: state
      entity_id: binary_sensor.balcony_comfort_temperature
      state: 'off'
    - condition: state
      entity_id: climate.balcony_heater
      state: 'off'
    - alias: Either display or desk_lamp should be on when the temperature is low
      condition: or
      conditions:
        - condition: state
          entity_id: binary_sensor.working_display_connected
          state: 'on'
        - condition: state
          entity_id: light.desk_lamp
          state: 'on'
  action:
    - service: climate.turn_on
      entity_id: climate.balcony_heater

- id: turn_off_balcony_heater
  alias: Turn off Balcony Heater
  trigger:
    - platform: state
      entity_id: light.desk_lampk
      to: 'off'
      for:
        minutes: 30
    - platform: state
      entity_id: binary_sensor.working_display_connected
      to: 'off'
      for:
        minutes: 30
    - platform: state
      entity_id: binary_sensor.balcony_comfort_temperature
      to: 'on'
      for:
        minutes: 30
  condition:
    - condition: state
      entity_id: climate.balcony_heater
      state: 'heat'
    # Do not turn off if it is cold on balcony
    - condition: state
      entity_id: binary_sensor.balcony_comfort_temperature
      state: 'on'
    - condition: state
      entity_id: binary_sensor.working_display_connected
      state: 'off'
  action:
    - service: climate.turn_off
      entity_id: climate.balcony_heater
    # Turn off desk lamp as well
    - condition: state
      entity_id: light.desk_lamp
      state: 'on'
    - service: light.turn_off
      entity_id: light.desk_lamp

- id: preheat_balcony
  alias: Preheat Balcony for a Workday
  trigger:
    - platform: state
      entity_id: binary_sensor.denyss_iphone_focus
      to: 'off'
  condition:
    - condition: state
      entity_id: binary_sensor.balcony_comfort_temperature
      state: 'off'
    - condition: state
      entity_id: binary_sensor.workday_sensor
      state: 'on'
    - condition: state
      entity_id: person.denys
      state: 'home'
    - condition: time
      after: '08:00'
      before: '15:00'
  action:
    - alias: Prepare an action variables
      variables:
        heat_action: "{{ 'HEAT_' ~ context.id }}"
        delay_minutes: '{{ range(1, 30) | random }}'

    - alias: Wait for some time after wake up
      delay:
        minutes: '{{ delay_minutes }}'

    - alias: Send an actionable notification
      service: script.announcement
      data:
        service: notify.denys
        title: '–†–æ–±–æ—á–µ –º—ñ—Å—Ü–µ üñ•'
        speak: false
        greetings:
          - "–ù–∞ –±–∞–ª–∫–æ–Ω—ñ {{ states('sensor.balcony_conditions_sensor_temperature') | round(1) }}¬∞C."
          - "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∞ –±–∞–ª–∫–æ–Ω—ñ {{ states('sensor.balcony_conditions_sensor_temperature') | round(1) }}¬∞C."
          - "–ó–∞—Ä–∞–∑ –Ω–∞ –±–∞–ª–∫–æ–Ω—ñ {{ states('sensor.balcony_conditions_sensor_temperature') | round(1) }}¬∞C."
        messages:
          - '–•–æ—á–µ—Ç–µ —É–≤—ñ–º–∫–Ω—É—Ç–∏ –æ–±—ñ–≥—Ä—ñ–≤?'
          - '–ù–∞–≥—Ä—ñ—Ç–∏ –±–∞–ª–∫–æ–Ω –¥–ª—è —Ä–æ–±–æ—Ç–∏?'
          - '–£–≤—ñ–º–∫–Ω—É—Ç–∏ –æ–±—ñ–≥—Ä—ñ–≤–∞—á?'
          - '–ù–∞–≥—Ä—ñ—Ç–∏ –¥–æ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ—ó —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏?'
          - '–ü—ñ–¥—ñ–≥—Ä—ñ—Ç–∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ—ó —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏?'
        notify_data:
          actions:
            - action: '{{ heat_action }}'
              title: –ù–∞–≥—Ä—ñ—Ç–∏ –±–∞–ª–∫–æ–Ω
          url: /lovelace/balcony

    - alias: Wait for notification to be pressed
      wait_for_trigger:
        - platform: event
          event_type: mobile_app_notification_action
          event_data:
            action: '{{ heat_action }}'
      timeout: '12:00:00'
      continue_on_timeout: false

    - alias: Start heating the balcony
      service: climate.turn_on
      entity_id: climate.balcony_heater

    - alias: Wait to heat up
      wait_for_trigger:
        - platform: state
          entity_id: binary_sensor.balcony_comfort_temperature
          to: 'on'
      timeout: '6:00:00'
      continue_on_timeout: false

    - alias: Notify about comfort temperature
      service: script.announcement
      data:
        service: notify.denys
        title: '–†–æ–±–æ—á–µ –º—ñ—Å—Ü–µ üñ•'
        speak: false
        greetings:
          - '–ú–æ–∂–Ω–∞ –π—Ç–∏ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏.'
          - '–ë–∞–ª–∫–æ–Ω –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏.'
          - '–†–æ–±–æ—á–µ –º—ñ—Å—Ü–µ –Ω–∞–≥—Ä—ñ—Ç–µ –¥–æ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ—ó —Ç–µ–º–ø–µ—Ä—Ç–∞—Ä—É—Ä–∏.'
          - '–†–æ–±–æ—á–µ –º—ñ—Å—Ü–µ –≥–æ—Ç–æ–≤–µ.'
        messages:
          - "–ù–∞ –±–∞–ª–∫–æ–Ω—ñ {{ states('sensor.balcony_conditions_sensor_temperature') | round(1) }}¬∞C."
          - "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {{ states('sensor.balcony_conditions_sensor_temperature') | round(1) }}¬∞C."
          - "–ó–∞—Ä–∞–∑ –Ω–∞ –±–∞–ª–∫–æ–Ω—ñ {{ states('sensor.balcony_conditions_sensor_temperature') | round(1) }}¬∞C."
        notify_data:
          url: /lovelace/balcony
