#
# Template
#
# https://www.home-assistant.io/integrations/template/
#

template:
  - binary_sensor:
      - name: Time to Clean
        state: >-
          {% set last_cleaning_start = as_timestamp(states('sensor.roborock_last_clean_start'), 0) %}
          {% set last_cleaning_duration = states('sensor.roborock_last_clean_duration') | int(0) %}
          {% set current_time = as_timestamp(now(), 0) %}
          {% set time_for_cleaning = current_time - last_cleaning_start > (60 * 60 * 48) %}
          {% set last_cleaning_was_short = last_cleaning_duration < (60 * 5) %}
          {{ time_for_cleaning or last_cleaning_was_short }}

      - name: Do Not Disturb Denys
        state: >-
          {% set camera_on = is_state('binary_sensor.wix_macbook_pro_camera_in_use', 'on') %}
          {% set mic_on = is_state('binary_sensor.wix_macbook_pro_audio_input_in_use', 'on') %}
          {% set focus_on = is_state('binary_sensor.denyss_iphone_focus', 'on') %}
          {% set sleep_on = is_state('binary_sensor.sleeping_time', 'on') %}
          {% set at_home = is_state('person.denys', 'home') %}
          {{ at_home and (camera_on or mic_on or focus_on or sleep_on) }}
        icon: >-
          {{ iif(is_state('binary_sensor.do_not_disturb_denys', 'on'), 'mdi:bell-off', 'mdi:bell') }}

      - name: Do Not Disturb Marry
        state: >-
          {% set camera_on = is_state('binary_sensor.marry_macbook_pro_camera_in_use', 'on') %}
          {% set mic_on = is_state('binary_sensor.marry_macbook_pro_audio_input_in_use', 'on') %}
          {% set focus_on = is_state('binary_sensor.iphone_maria_focus', 'on') %}
          {% set sleep_on = is_state('binary_sensor.sleeping_time', 'on') %}
          {% set at_home = is_state('person.marry', 'home') %}
          {{ at_home and (camera_on or mic_on or focus_on or sleep_on) }}
        icon: >-
          {{ iif(is_state('binary_sensor.do_not_disturb_marry', 'on'), 'mdi:bell-off', 'mdi:bell') }}

      - name: Working Display Connected
        state: >-
          {% set at_home = is_state('device_tracker.wix_macbook_pro', 'home') %}
          {% set display_connected = is_state('sensor.wix_macbook_pro_primary_display_name', 'LG HDR 4K') %}
          {% set active = is_state('binary_sensor.wix_macbook_pro_active', 'on') %}
          {{ at_home and display_connected and active }}
        icon: >-
          {{ iif(is_state('binary_sensor.working_display_connected', 'on'), 'mdi:monitor-dashboard', 'mdi:monitor-off') }}

      - name: Balcony Comfort Temperature
        state: >-
          {% set current = state_attr('climate.balcony_heater', 'current_temperature') | float(10) %}
          {% set target = state_attr('climate.balcony_heater', 'temperature') | float(10) %}
          {{ current >= target }}
        icon: >-
          {{ iif(is_state('binary_sensor.working_display_connected', 'on'), 'mdi:thermometer', 'mdi:thermometer-low') }}

      - name: Heating Season
        state: >-
          {% set days = 3 %}
          {% set threshold = 8 %}
          {{ state_attr('weather.nyvky', 'forecast')[:days] | selectattr('temperature', 'le', threshold) | list | count }}
        icon: >-
          {{ iif(is_state('binary_sensor.heating_season', 'on'), 'mdi:radiator', 'mdi:radiator-off') }}

      - name: Bike Day
        state: >-
          {% set wont_rain = state_attr('binary_sensor.bike_day', 'wont_rain') %}
          {% set no_precipitation = state_attr('binary_sensor.bike_day', 'no_precipitation') %}
          {% set warm = state_attr('binary_sensor.bike_day', 'warm') %}
          {% set no_storm = state_attr('binary_sensor.bike_day', 'no_storm') %}

          {{ warm and no_storm and (wont_rain or no_precipitation) }}
        icon: >-
          {{ iif(is_state('binary_sensor.bike_day', 'on'), 'mdi:bike-fast', 'mdi:bike') }}
        attributes:
          wont_rain: >-
            {% set hours = 9 %}
            {% set target_probability = 30 %}
            {{ states('sensor.nyvky_forecast_precipitation_probability') | float(0) < target_probability }}
          no_precipitation: >-
            {% set hours = 9 %}
            {{ state_attr('weather.kyiv_hourly', 'forecast')[:hours] | selectattr('precipitation', 'le', 0.1) | list | count == hours }}
          warm: >-
            {% set hours = 9 %}
            {% set target_temp = 10 %}
            {{ state_attr('weather.kyiv_hourly', 'forecast')[:hours] | selectattr('temperature', 'ge', target_temp) | list | count == hours }}
          no_storm: >-
            {% set max_wind_speed = 20 %}
            {{ states('sensor.nyvky_forecast_wind_speed') | float(0) < max_wind_speed }}

  # Misto Lun Sensors
  - sensor:
      - name: Outdoor PM2.5
        icon: mdi:blur
        unit_of_measurement: 'µg/m³'
        device_class: pm25
        state: >-
          {{ state_attr('sensor.outdoor_aqi', 'pm25') | round() }}

      - name: Kyiv AQI
        icon: mdi:cloud
        unit_of_measurement: AQI
        device_class: aqi
        state: >-
          {{ state_attr('sensor.misto_lun', 'lunmisto_air').aqi_scale_value | int(0) }}

      - name: Kyiv Traffic Jams
        icon: mdi:traffic-light
        unit_of_measurement: '%'
        state: >-
          {{ state_attr('sensor.misto_lun', 'tomtom_jams').jams | int(0) }}

  # Availability Monitor
  - sensor:
      - name: Unavailable Devices
        state: >-
          {% set domains = [states.light, states.media_player, states.fan, states.humidifier] %}
          {% set states = ['unavailable', 'unknown', 'none'] %}
          {{ expand(domains) | selectattr('state', 'in', states) | list | length }}
        icon: >-
          {{ iif(states('sensor.unavailable_devices') | int(0) > 0, 'mdi:lan-connect', 'mdi:lan-disconnect') }}
        attributes:
          entities: >-
            {% set domains = [states.light, states.media_player, states.fan, states.humidifier] %}
            {% set states = ['unavailable', 'unknown', 'none'] %}
            {{ expand(domains) | selectattr('state', 'in', states) | map(attribute='entity_id') | list }}
          entities_names: >-
            {% set domains = [states.light, states.media_player, states.fan, states.humidifier] %}
            {% set states = ['unavailable', 'unknown', 'none'] %}
            {{ expand(domains) | selectattr('state', 'in', states) | map(attribute='name') | list }}

  # Time To New Home
  - sensor:
      - name: Fayna Days Left
        unit_of_measurement: days
        state: >-
          {{ (as_local(as_datetime("2023-06-01")) - now()).days }}
        icon: mdi:calendar-arrow-right

      - name: Fayna Days Past
        unit_of_measurement: days
        state: >-
          {{ (now() - as_local(as_datetime("2021-07-22"))).days }}
        icon: mdi:calendar-arrow-left

      - name: Fayna Progress
        unit_of_measurement: '%'
        state: >-
          {% set day = 60 * 60 * 24 %}
          {% set days_left = (as_timestamp("2023-06-01 00:00:00") - as_timestamp(now(), 0)) / day %}
          {% set days_past = (as_timestamp(now(), 0) - as_timestamp("2021-07-22 13:00")) / day %}
          {% set days_total = days_left + days_past %}
          {{ (days_past / days_total * 100) | round(2) }}
        icon: mdi:crane

  # Energy Sensors
  - sensor:
      # Living Room Smart + Dumb Devices
      - name: Living Room Total energy
        state_class: total_increasing
        device_class: energy
        unit_of_measurement: kWh
        state: >-
          {% set devices = states('sensor.living_room_devices_energy') | float(0) %}
          {% set fridge = states('sensor.fridge_energy') | float(0) %}
          {% set rbpi = states('sensor.raspberry_pi_energy') | float(0) %}
          {% set router = states('sensor.router_energy') | float(0) %}
          {{ devices + fridge + rbpi + router }}

      - name: Bathroom Total energy
        state_class: total_increasing
        device_class: energy
        unit_of_measurement: kWh
        state: >-
          {% set water_heater = states('sensor.water_heater_energy') | float(0) %}
          {{ water_heater }}

      - name: Total energy
        state_class: total_increasing
        device_class: energy
        unit_of_measurement: kWh
        state: >-
          {% set living_room = states('sensor.living_room_total_energy') | float(0) %}
          {% set bedroom = states('sensor.bedroom_total_energy') | float(0) %}
          {% set balcony = states('sensor.balcony_total_energy') | float(0) %}
          {% set bathroom = states('sensor.bathroom_total_energy') | float(0) %}
          {{ living_room + bedroom + balcony + bathroom }}

      - name: Total power
        state_class: measurement
        device_class: power
        unit_of_measurement: W
        state: >-
          {% set living_room = states('sensor.living_room_devices_power') | float(0) %}
          {% set bedroom = states('sensor.bedroom_total_power') | float(0) %}
          {% set balcony = states('sensor.balcony_total_power') | float(0) %}
          {% set bathroom = states('sensor.bathroom_total_power') | float(0) %}
          {{ living_room + bedroom + balcony + bathroom }}

      - name: Energy Price
        device_class: monetary
        unit_of_measurement: UAH/kWh
        state: >-
          {% set below_limit_price = 1.44 %}
          {% set above_limit_price = 1.68 %}

          {% if is_state('utility_meter.energy_monthly', 'peak') %}
            {{ below_limit_price }}
          {% elif is_state('utility_meter.energy_monthly', 'offpeak') %}
            {{ below_limit_price * 0.5 }}
          {% elif is_state('utility_meter.energy_monthly', 'peak_overlimit') %}
            {{ above_limit_price }}
          {% elif is_state('utility_meter.energy_monthly', 'offpeak_overlimit') %}
            {{ above_limit_price * 0.5 }}
          {% else %}
            None
          {% endif %}

      - name: Monthly Energy Cost
        device_class: monetary
        unit_of_measurement: UAH
        state: >-
          {% set below_limit_price = 1.44 %}
          {% set above_limit_price = 1.68 %}

          {% set peak_consumed = states('sensor.energy_monthly_peak') | float(0) %}
          {% set offpeak_consumed = states('sensor.energy_monthly_offpeak') | float(0) %}
          {% set peak_overlimit_consumed = states('sensor.energy_monthly_peak_overlimit') | float(0) %}
          {% set offpeak_overlimit_consumed = states('sensor.energy_monthly_offpeak_overlimit') | float(0) %}

          {% set peak_cost = peak_consumed * below_limit_price %}
          {% set offpeak_cost = offpeak_consumed * below_limit_price * 0.5 %}
          {% set peak_overlimit_consumed = peak_overlimit_consumed * above_limit_price %}
          {% set offpeak_overlimit_consumed = offpeak_overlimit_consumed * above_limit_price * 0.5 %}

          {{ peak_cost + offpeak_cost + peak_overlimit_consumed + offpeak_overlimit_consumed }}
        attributes:
          last_period: >-
            {% set below_limit_price = 1.44 %}
            {% set above_limit_price = 1.68 %}

            {% set peak_consumed = state_attr('sensor.energy_monthly_peak', 'last_period') | float(0) %}
            {% set offpeak_consumed = state_attr('sensor.energy_monthly_offpeak', 'last_period') | float(0) %}
            {% set peak_overlimit_consumed = state_attr('sensor.energy_monthly_peak_overlimit', 'last_period') | float(0) %}
            {% set offpeak_overlimit_consumed = state_attr('sensor.energy_monthly_offpeak_overlimit', 'last_period') | float(0) %}

            {% set peak_cost = peak_consumed * below_limit_price %}
            {% set offpeak_cost = offpeak_consumed * below_limit_price * 0.5 %}
            {% set peak_overlimit_consumed = peak_overlimit_consumed * above_limit_price %}
            {% set offpeak_overlimit_consumed = offpeak_overlimit_consumed * above_limit_price * 0.5 %}

            {{ peak_cost + offpeak_cost + peak_overlimit_consumed + offpeak_overlimit_consumed }}
